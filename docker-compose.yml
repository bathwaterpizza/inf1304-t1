services:
  # Kafka Broker 1 (Controller + Broker)
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:29092,CONTROLLER://kafka1:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # Cluster ID for KRaft mode
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka1_data:/var/lib/kafka/data
      - ./logs:/app/logs
    networks:
      - factory_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Broker 2 (Controller + Broker)
  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9094:9094"
      - "9095:9095"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9094'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka2:29092,CONTROLLER://kafka2:29093,PLAINTEXT_HOST://0.0.0.0:9094'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka2_data:/var/lib/kafka/data
      - ./logs:/app/logs
    networks:
      - factory_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Broker 3 (Controller + Broker)
  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9096:9096"
      - "9097:9097"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:29092,PLAINTEXT_HOST://localhost:9096'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka3:29092,CONTROLLER://kafka3:29093,PLAINTEXT_HOST://0.0.0.0:9096'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka3_data:/var/lib/kafka/data
      - ./logs:/app/logs
    networks:
      - factory_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9096"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for storing processed data
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-factory_monitoring}
      POSTGRES_USER: ${POSTGRES_USER:-factory_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-factory_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - factory_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-factory_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring (optional, helpful for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: factory-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - factory_network

  # Temperature Sensor Producer
  temperature-sensor:
    build:
      context: .
      dockerfile: docker/Dockerfile.producer
    container_name: temperature-sensor
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SENSOR_ID: temp-sensor-001
      SENSOR_TYPE: temperature
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SENSOR_TOPIC: ${SENSOR_TOPIC}
      SAMPLING_INTERVAL: ${SENSOR_INTERVAL_SECONDS}
      FACTORY_SECTION: production
      MACHINE_ID: machine-001
      ZONE: zone-a
      LOG_LEVEL: ${LOG_LEVEL}
      TEMPERATURE_WARNING_THRESHOLD: ${TEMPERATURE_WARNING_THRESHOLD}
      TEMPERATURE_CRITICAL_THRESHOLD: ${TEMPERATURE_CRITICAL_THRESHOLD}
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - factory_network
    restart: unless-stopped

  # Vibration Sensor Producer
  vibration-sensor:
    build:
      context: .
      dockerfile: docker/Dockerfile.producer
    container_name: vibration-sensor
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SENSOR_ID: vib-sensor-002
      SENSOR_TYPE: vibration
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SENSOR_TOPIC: ${SENSOR_TOPIC}
      SAMPLING_INTERVAL: ${SENSOR_INTERVAL_SECONDS}
      FACTORY_SECTION: production
      MACHINE_ID: machine-002
      ZONE: zone-b
      LOG_LEVEL: ${LOG_LEVEL}
      VIBRATION_WARNING_THRESHOLD: ${VIBRATION_WARNING_THRESHOLD}
      VIBRATION_CRITICAL_THRESHOLD: ${VIBRATION_CRITICAL_THRESHOLD}
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - factory_network
    restart: unless-stopped

  # Energy Sensor Producer
  energy-sensor:
    build:
      context: .
      dockerfile: docker/Dockerfile.producer
    container_name: energy-sensor
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SENSOR_ID: energy-sensor-003
      SENSOR_TYPE: energy
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SENSOR_TOPIC: ${SENSOR_TOPIC}
      SAMPLING_INTERVAL: ${SENSOR_INTERVAL_SECONDS}
      FACTORY_SECTION: utilities
      MACHINE_ID: generator-001
      ZONE: zone-c
      LOG_LEVEL: ${LOG_LEVEL}
      ENERGY_ANOMALY_THRESHOLD: ${ENERGY_ANOMALY_THRESHOLD}
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - factory_network
    restart: unless-stopped

  # Sensor Data Consumer 1
  consumer-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.consumer
    container_name: consumer-1
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      CONSUMER_ID: consumer-001
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SENSOR_TOPIC: ${SENSOR_TOPIC}
      ALERT_TOPIC: ${ALERT_TOPIC}
      CONSUMER_GROUP: ${CONSUMER_GROUP}
      DATABASE_URL: ${DATABASE_URL}
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG: ${DEBUG}
      ENABLE_METRICS: ${ENABLE_METRICS}
      TEMPERATURE_WARNING_THRESHOLD: ${TEMPERATURE_WARNING_THRESHOLD}
      TEMPERATURE_CRITICAL_THRESHOLD: ${TEMPERATURE_CRITICAL_THRESHOLD}
      VIBRATION_WARNING_THRESHOLD: ${VIBRATION_WARNING_THRESHOLD}
      VIBRATION_CRITICAL_THRESHOLD: ${VIBRATION_CRITICAL_THRESHOLD}
      ENERGY_ANOMALY_THRESHOLD: ${ENERGY_ANOMALY_THRESHOLD}
    networks:
      - factory_network
    restart: unless-stopped

  # Sensor Data Consumer 2
  consumer-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.consumer
    container_name: consumer-2
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      CONSUMER_ID: consumer-002
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SENSOR_TOPIC: ${SENSOR_TOPIC}
      ALERT_TOPIC: ${ALERT_TOPIC}
      CONSUMER_GROUP: ${CONSUMER_GROUP}
      DATABASE_URL: ${DATABASE_URL}
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG: ${DEBUG}
      ENABLE_METRICS: ${ENABLE_METRICS}
      TEMPERATURE_WARNING_THRESHOLD: ${TEMPERATURE_WARNING_THRESHOLD}
      TEMPERATURE_CRITICAL_THRESHOLD: ${TEMPERATURE_CRITICAL_THRESHOLD}
      VIBRATION_WARNING_THRESHOLD: ${VIBRATION_WARNING_THRESHOLD}
      VIBRATION_CRITICAL_THRESHOLD: ${VIBRATION_CRITICAL_THRESHOLD}
      ENERGY_ANOMALY_THRESHOLD: ${ENERGY_ANOMALY_THRESHOLD}
    networks:
      - factory_network
    restart: unless-stopped

  # Sensor Data Consumer 3
  consumer-3:
    build:
      context: .
      dockerfile: docker/Dockerfile.consumer
    container_name: consumer-3
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      CONSUMER_ID: consumer-003
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SENSOR_TOPIC: ${SENSOR_TOPIC}
      ALERT_TOPIC: ${ALERT_TOPIC}
      CONSUMER_GROUP: ${CONSUMER_GROUP}
      DATABASE_URL: ${DATABASE_URL}
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG: ${DEBUG}
      ENABLE_METRICS: ${ENABLE_METRICS}
      TEMPERATURE_WARNING_THRESHOLD: ${TEMPERATURE_WARNING_THRESHOLD}
      TEMPERATURE_CRITICAL_THRESHOLD: ${TEMPERATURE_CRITICAL_THRESHOLD}
      VIBRATION_WARNING_THRESHOLD: ${VIBRATION_WARNING_THRESHOLD}
      VIBRATION_CRITICAL_THRESHOLD: ${VIBRATION_CRITICAL_THRESHOLD}
      ENERGY_ANOMALY_THRESHOLD: ${ENERGY_ANOMALY_THRESHOLD}
    networks:
      - factory_network
    restart: unless-stopped

  # Monitoring Service
  monitoring:
    build:
      context: .
      dockerfile: docker/Dockerfile.monitoring
    container_name: monitoring
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      FLASK_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - factory_network
    restart: unless-stopped

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  postgres_data:

networks:
  factory_network:
    driver: bridge